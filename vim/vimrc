""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer:
"       Ilias Stamatis <stamatis.iliass@gmail.com>
"
" Sections:
"       -> Plugins
"       -> General
"       -> Clipboard
"       -> Indentation and Formatting
"       -> Auto-closing
"       -> Whitespace
"       -> Vertical Line
"       -> Code Navigation
"       -> Windows
"       -> Highlight and Searching
"       -> Backup and Swap
"       -> Compile and Run Code
"       -> Code Snippets
"       -> Languages
"       -> Shell Command
"       -> Plugins Configuration
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Plugins {
    " The following 4 lines are required by the Vundle plugin manager
    set nocompatible                " be iMproved (must be first line)
    filetype off
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()

    " Let Vundle manage Vundle, required
    Plugin 'VundleVim/Vundle.vim'

    " Vim motions. This plugin is really awesome!
    " Usage: for example type <leader><leader>w and navigate quickly
    Plugin 'easymotion/vim-easymotion'

    " Toggle code comments on/off
    Plugin 'preservim/nerdcommenter'

    " Automatically detect indentation options per file
    Plugin 'tpope/vim-sleuth'

    if has('nvim') || has('patch-8.2.1978')
        " Deoplete and its dependencies for code completion
        Plugin 'Shougo/deoplete.nvim'
        Plugin 'roxma/nvim-yarp'
        Plugin 'roxma/vim-hug-neovim-rpc'
    endif

    " The molokai theme
    Plugin 'tomasr/molokai'

    " This is worth it for the ":Git blame" command
    Plugin 'tpope/vim-fugitive'

    call vundle#end()               " required
    filetype plugin indent on       " required, automatically detect file types
" }

" General {
    set title                       " set window title
    set encoding=utf-8

    if has('statusline') && has('cmdline_info')
        set laststatus=2            " always show a status line
        set ruler                   " show the ruler
        set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
    endif

    set number                      " line numbers on
    set backspace=2                 " backspace as it needs to be
    set scrolloff=3                 " minimum lines to keep above and below cursor
    set hidden                      " allow buffer switching without saving

    " Time out on key codes but not mappings.
    set notimeout
    set ttimeout
    set ttimeoutlen=10

    syntax on                       " enable syntax highlighting
    colorscheme molokai

    let loaded_matchparen = 1       " don't do paren matching

    " With a map leader it's possible to do extra key combinations.
    let mapleader = ","

    " Save typing and eliminate :Q style typos due to lazy holding shift.
    nnoremap ; :

    " Quick save.
    nnoremap <leader>w :w!<cr>

    " Wrapped lines goes down/up to next row, rather than next line in file.
    noremap j gj
    noremap k gk

    " Revert the functionality of ^ and 0
    noremap 0 g^
    noremap ^ g0

    " <Esc> is inconvinient as it requires stretching to the top of the keyboard.
    inoremap jk <Esc>

    " <Del> key is too far...
    inoremap <leader>d <Del>

    " Make sure Vim returns to the same line when you reopen a file.
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

    " For when you forget to sudo.. Really Write the file.
    cnoremap w!! w !sudo tee % >/dev/null

    " Use a block cursor in insert mode on gvim (instead of a tiny bar)
    set guicursor+=i-ci:block-blinkwait700-blinkon400-blinkoff800
" }

" Clipboard {
    if has('clipboard')
        " I don't set clipboard=unnamedplus because vim will then copy to the
        " clipboard when deleting too, which I find annoying. In the way
        " I configure things below I can just yank without thinking which
        " register is the data copied to. I only have to think about registers
        " and where I am pasting from (clipboard or unnamed register) when
        " hitting p.

        " Let y copy both to the unnamed register *and* the X11 clipboard
        autocmd TextYankPost *
            \ if v:event.operator == 'y' && v:event.regname == '' |
            \     call setreg('+', v:event.regcontents, v:event.regtype) |
            \ endif

        " Yank from the cursor to the end of the line
        nnoremap Y y$

        " Use the following to paste from the clipboard
        nnoremap <leader>p "+p
        nnoremap <leader>P "+P
    endif
" }

" Indentation and Formatting {
    " The vim-sleuth pluing is going to automatically detect and adjust
    " 'shiftwidth' and 'expandtab' based on the current file, or by looking at
    " other files of the same type in the current and parent directories.

    set autoindent                  " indent at the same level of the previous line
    " set shiftwidth=4                " use indents of 4 spaces
    " set expandtab                   " tabs are spaces, not tabs
    " set noexpandtab                 " tabs are tabs, not spaces
    set shiftround                  " always round to multiple of 'shiftwidth'
    set smarttab                    " <BS> will delete a 'shiftwidth' indent

    " The following is like kind of setting softtabstop to equal tabstop. If I
    " remove it and paste somewhere <space><space>text and then hit Tab in the
    " beggining of the indent, the spaces will remain there.
    set softtabstop=-1

    set formatoptions=croql

    " Use Q for formatting the current paragraph or visually selected lines
    vmap Q gq
    nmap Q gqap

    " All .tex are of type latex
    let g:tex_flavor = "latex"
    " Auto-wrap text for latex files
    autocmd Filetype tex setlocal textwidth=79 formatoptions+=t

    " Also auto-wrap txt files, but set textwidth to 120
    autocmd BufRead,BufNewFile *.txt setlocal textwidth=120 formatoptions+=t
" }

" Auto-closing {
    " I only care about auto-closing brackets of code blocks
    function! s:CloseBracket()
        if getline('.') =~# '^\s*\(struct\|class\|enum\) '
            return "{\<CR>};\<Esc>O"
        else
            return "{\<CR>}\<Esc>O"
        endif
    endfunction

    inoremap <expr> {<CR> <SID>CloseBracket()

    " This is also useful for languages like C
    inoremap (; ();<left><left>
" }

" Whitespace {
    " Detect trailing whitespace on buffer load
    autocmd BufReadPost * call g:DetectTrailing()

    function! g:DetectTrailing()
        if !search('\s\+$')                     " if there is trailing whitespace
            " setup an autocmd that removes it on every write
            execute "autocmd BufWritePre * :%s/\\s\\+$//e"
            let g:whitespace_autoremove=1
        else
            set list                            " show whitespace
            set listchars=tab:\ \ ,trail:.      " only display trailing spaces using a dot
            execute "normal! g'\"" |            " jump back to last cursor position
            let g:whitespace_autoremove=0
        endif
    endfunction

    " Use the following func to toggle automatic whitespace removal
    nnoremap <leader>no :call g:ToggleWhitespaceAutocmd()<cr>

    function! g:ToggleWhitespaceAutocmd()
        if (g:whitespace_autoremove == 1)
            execute "autocmd! BufWritePre"
            let g:whitespace_autoremove=0
        else
            execute "autocmd BufWritePre * :%s/\\s\\+$//e"
            let g:whitespace_autoremove=1
        endif
    endfunction

    " Clear a line quickly.
    nnoremap <leader><space> ^D

    " Insert empty line above or below while staying in normal mode.
    nnoremap <leader>o :set paste<cr>m`o<Esc>``:set nopaste<cr>
    nnoremap <leader>O :set paste<cr>m`O<Esc>``:set nopaste<cr>
" }

" Vertical Line {
    if exists('+colorcolumn')
        " Automatically show the vertical line for files containing source code.
        autocmd FileType c,cpp,java,python,javascript set colorcolumn=80
    endif

    function! g:ToggleColorColumn()
        if(&colorcolumn == 0)
            set colorcolumn=80
        else
            set colorcolumn=0
        endif
    endfunc

    nnoremap <leader>l :call g:ToggleColorColumn()<cr>
" }

" Code Navigation {
    " Go to the start/end of the function that the cursor is currently inside.
    "
    " The following is supposed to work only in languages that use brackets
    " such as C, and the opening/closing bracket is in column 1 (first char).
    nnoremap <leader>s [[
    nnoremap <leader>e ][

    if has('cscope')
        " Look for a 'cscope.out' file starting from the current directory, going up to the root directory.
        let s:dirs = split(getcwd(), "/")
        while s:dirs != []
                let s:path = "/" . join(s:dirs, "/")
                if (filereadable(s:path . "/cscope.out"))
                        set nocscopeverbose
                        execute "cs add " . s:path . "/cscope.out " . s:path . " -v"
                        set cscopeverbose
                        break
                endif
                let s:dirs = s:dirs[:-2]
        endwhile

        " Look for a tags file in the directory of the current file, in the
        " current directory and up and up until $HOME
        set tags=./tags,tags;$HOME

        " Use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
        set cscopetag

        " Check cscope for definition of a symbol before checking ctags
        set csto=0

        " The following maps all invoke one of the following cscope search types:
        "
        "   's'   symbol: find all references to the token under cursor
        "   'g'   global: find global definition(s) of the token under cursor
        "   'c'   calls:  find all calls to the function name under cursor
        "   't'   text:   find all instances of the text under cursor
        "   'e'   egrep:  egrep search for the word under cursor
        "   'f'   file:   open the filename under cursor
        "   'i'   includes: find files that include the filename under cursor
        "   'd'   called: find functions that function under cursor calls

        " To do the first type of search, hit 'CTRL-\', followed by one of the
        " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
        " search will be displayed in the current window. You can use CTRL-T to go
        " back to where you were before the search.
        nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
        nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
        nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
        nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

        " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
        " makes the vim window split horizontally, with search result displayed in
        " the new window.
        nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
        nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
        nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

        " Hitting CTRL-space *twice* before the search type does a vertical split
        " instead of a horizontal one (vim 6 and up only)
        nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
        nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
        nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
        nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
    endif
" }

" Windows {
    set splitbelow                  " when splitting put new window below of the current one
    set splitright                  " when splitting put new window to the right of the current one

    " Close window quickly.
    nnoremap <leader>q :q<cr>
    nnoremap <leader><leader>q :q!<cr>

    " Easier moving in windows.
    nnoremap <C-J> <C-W>j
    nnoremap <C-K> <C-W>k
    nnoremap <C-L> <C-W>l
    nnoremap <C-H> <C-W>h
" }

" Highlight and Searching {
    set incsearch                   " incremental search
    set hlsearch                    " highlight search terms
    set ignorecase                  " case insensitive search
    set smartcase                   " case sensitive only when a capital letter appears

    " Clear highlighted search.
    nnoremap <silent> <leader>/ :nohlsearch<cr>

    " Highlight word occurrences but do not jump to the next result.
    nnoremap <leader>* *N
" }

" Backup and Swap {
    set noswapfile              " turn swap off
    set backup                  " enable backups

    let directory = $HOME . "/.vim/backup/"
    execute "set backupdir=".directory

    " Create backup directory if it doesn't exist.
    if !isdirectory(directory)
        silent! execute "!mkdir -p ".directory
    endif
" }

" Compile and Run Code {
    " Run {
        autocmd FileType python,sh,bash,zsh nnoremap <leader>r :w<cr> :!clear; ./%<cr>
        autocmd FileType c,cpp nnoremap <leader>r :!clear; ./%:r<cr>
        autocmd FileType java nnoremap <leader>r :!clear; java %:r<cr>
    " }

    " Compile {
        autocmd FileType c,cpp,java nnoremap <leader>m :w<cr> :Shell clear; make<cr>
        autocmd FileType c nnoremap <leader>c9 :w<cr> :Shell gcc -Og -Wall -W -pedantic -ggdb3 -fno-omit-frame-pointer -o %:r %<cr>
        autocmd FileType cpp nnoremap <leader>c9 :w<cr> :Shell g++ -Og -Wall -W -pedantic -ggdb3 -fno-omit-frame-pointer -o %:r %<cr>
        autocmd FileType java nnoremap <leader>c9 :w<cr> :Shell javac %<cr>
    " }
" }

" Code Snippets {
    function! g:ExpandSnippet()
        if expand("<cword>") == 'pr'
            execute "normal! Aintf(\"\\n\");\<esc>4h"
            startinsert
        elseif expand("<cword>") == 'pri'
            execute "normal! Antf(\"value: %d\\n\", );\<esc>h"
            startinsert
        elseif expand("<cword>") == 'cout'
            execute "normal! Istd::\<esc>A <<  << std::endl;\<esc>4bh"
            startinsert
        elseif expand("<cword>") == 'em'
            " used in latex; expands to \emph{
            execute "normal! bi\\\<esc>eaph{\<esc>"
            startinsert!
        elseif getline('.') =~# '^\s*main$'
            execute "normal! ^d$i#include <stdio.h>\<cr>#include <stdlib.h>\<cr>\<cr>\<cr>int main(void)\<cr>{\<cr>puts(\"hello\");\<cr>return 0;\<cr>}\<esc>kk"
        elseif getline('.') =~# '^\s*maing$'
            execute "normal! ^d$i#include <iostream>\<cr>\<cr>\<cr>int main()\<cr>{\<cr>std::cout << \"hello\" << std::endl;\<cr>return 0;\<cr>}\<esc>kk"
        else
            execute "normal! a**"
            startinsert!
        endif
    endfunction

    inoremap ** <esc>:call g:ExpandSnippet()<cr>

    " Preload register 's' in order to quickly sign patches with "sp
    let @s="Signed-off-by: Ilias Stamatis <stamatis.iliass@gmail.com>"
" }

" Languages {
    " Greek {
        set keymap=greek_utf-8
    " }

    " Easy change keymap.
    inoremap <leader>g <c-^>

    " Don't enable keymap by default in Insert mode and when entering a search pattern.
    set iminsert=0
    set imsearch=-1
" }

" Shell Command {
    " Display output of shell commands in new window.
    " Only one window by command, if a window already exists for a command, it will be reused.
    " E.g. :Shell ls
    function! s:ExecuteInShell(command, bang)
        let _ = a:bang != '' ? s:_ : a:command == '' ? '' : join(map(split(a:command), 'expand(v:val)'))

        if (_ != '')
            let s:_ = _
            let bufnr = bufnr('%')
            let winnr = bufwinnr('^' . _ . '$')
            silent! execute  winnr < 0 ? 'belowright new ' . fnameescape(_) : winnr . 'wincmd w'
            setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile wrap number
            silent! :%d
            let message = 'Execute ' . _ . '...'
            call append(0, message)
            echo message
            silent! 2d | resize 1 | redraw
            silent! execute 'silent! %!'. _
            silent! execute 'resize ' . line('$')
            silent! execute 'syntax on'
            silent! execute 'autocmd BufUnload <buffer> execute bufwinnr(' . bufnr . ') . ''wincmd w'''
            silent! execute 'autocmd BufEnter <buffer> execute ''resize '' .  line(''$'')'
            silent! execute 'nnoremap <silent> <buffer> <cr> :call <SID>ExecuteInShell(''' . _ . ''', '''')<cr>'
            " Reexecute command with <localleader>r in a window opened by :Shell.
            silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . _ . ''', '''')<cr>'
            " Go to the previous window with <localleader>g.
            silent! execute 'nnoremap <silent> <buffer> <LocalLeader>g :execute bufwinnr(' . bufnr . ') . ''wincmd w''<cr>'
            nnoremap <silent> <buffer> <C-W>_ :execute 'resize ' . line('$')<cr>
            silent! syntax on
        endif
    endfunction

    command! -complete=shellcmd -nargs=* -bang Shell call s:ExecuteInShell(<q-args>, '<bang>')
" }

" Plugins Configuration {
    " deoplete {
        if has('nvim') || has('patch-8.2.1978')
            let g:deoplete#enable_at_startup = 1
            call deoplete#custom#option('smart_case', 1)
            call deoplete#custom#option('min_pattern_length', 3)
        endif

        " use TAB for completion - I think this is plugin agnostic
        inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
        inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
    " }

    " nerdcommenter {
        " Add spaces after comment delimiters by default
        let g:NERDSpaceDelims = 1

        " Use // style comments for C since nesting /* */ comments isn't legal
        let g:NERDCustomDelimiters = { 'c': { 'left': '//','right': '' } }
        let g:NERDCustomDelimiters = { 'cpp': { 'left': '//','right': '' } }
    " }
" }
